# Build Pipeline for Forge
name: Build
# Controls when the workflow will run
on:
  # Triggers the workflow on push events
  push:
    branches: [ develop, release/**, main, feature/**, issue/**, issues/**, dependabot/** ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # First job in the workflow installs and verifies the software
  build:
    name: Build, Test, Verify, Publish
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      #########################################################################
      # Environment Setup
      #########################################################################
      # NOTE: This step is platform-specific
      # Checks out this repository and sets up the build/test environment with 
      # gradle
      - name: Checkout project sources
        uses: actions/checkout@v2
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      #########################################################################
      # Versioning (featuring weird gradle output work-arounds)
      #########################################################################
      # NOTE: This step is platform-specific
      # Retrieve version information for use in the other versioning steps
      - name: Get version
        id: get-version
        run: |
          echo "the_service=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "the_env=$(printenv)" >> $GITHUB_ENV
          echo "${{ github.event.repository.name }}"
          ./gradlew currentVersion -q > .temp_version.out
          the_version=$(cat .temp_version.out |grep -v Downloading |grep -v '%')
          rm .temp_version.out
          echo "the_version=$the_version" >> $GITHUB_ENV
          echo "Initial Version: [$the_version]"

      # Pre-Alpha Logic - Use the project version number and add the short hash
      # to it
      - name: Bump pre-alpha version
        # If triggered by push to a feature branch
        if: |
          ${{ startsWith(github.ref, 'refs/heads/issue') }}      ||
          ${{ startsWith(github.ref, 'refs/heads/dependabot/') }} ||
          ${{ startsWith(github.ref, 'refs/heads/feature/') }}
        # At pre-alpha, append git-commit to version, set it into gradle
        # property, read the version out and set to build_service_version
        run: |
          new_version="${{ env.the_version }}+$(git rev-parse --short HEAD)"
          echo "software_version=${new_version}" >> $GITHUB_ENV

      # Alpha Logic - Use the project version number and add -alpha.1 or bump
      # alpha number
      - name: Bump alpha version
        env:
          VERSION: ${{ env.the_version }}
        # If triggered by push to the develop branch
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: |
          if [[ ${VERSION} == *"-alpha"* ]]; then
            alpha_number=$(echo "${VERSION}" | sed -e s/^.*-alpha.//g)
            alpha_number=$((alpha_number+1))
            the_version=$(echo "$the_version" | sed -e s/-alpha.*//g)
            the_version="${the_version}-alpha.$alpha_number"
            echo "software_version=${the_version}" >> $GITHUB_ENV
            echo "the_version=${the_version}" >> $GITHUB_ENV
          else
            the_version="${{ env.the_version }}-alpha.1"
            echo "software_version=${the_version}" >> $GITHUB_ENV
            echo "the_version=${the_version}" >> $GITHUB_ENV
          fi
          echo "venue=sit" >> $GITHUB_ENV

      # Release Candidate Logic - Remove -alpha* and add -rc.1, or bump the rc
      # number
      - name: Bump rc version
        # If triggered by push to a release branch
        if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
        env:
          VERSION: ${{ env.the_version }}
          # True if the version already has a 'rc' pre-release identifier
#          BUMP_RC: ${{ contains(${env.the_version}, 'rc') }}
        run: |
          if [[ ${VERSION} == *"-rc"* ]]; then
            rc_number=$(echo "${VERSION}" | sed -e s/^.*-rc.//g)
            rc_number=$((alpha_number+1))
            the_version=$(echo "$the_version" | sed -e s/-rc.*//g)
            the_version="${the_version}-rc.$rc_number"
            echo "software_version=${the_version}" >> $GITHUB_ENV
            echo "the_version=${the_version}" >> $GITHUB_ENV
          else
            the_version="${{ env.the_version }}-rc.1"
            echo "software_version=${the_version}" >> $GITHUB_ENV
            echo "the_version=${the_version}" >> $GITHUB_ENV
          fi
          echo "venue=uat" >> $GITHUB_ENV

      # Release Logic
      - name: Release version
        # If triggered by push to the main branch
        if: ${{ startsWith(github.ref, 'refs/heads/main') }}
        env:
          VERSION: ${{ env.the_version }}
        # Remove -rc.* from end of version string
        run: |
          software_version=$(echo "${VERSION}" | sed -e s/-rc.*//g)
          echo "software_version=$software_version" >> $GITHUB_ENV
          echo "the_version=$software_version" >> $GITHUB_ENV
          echo "venue=ops" >> $GITHUB_ENV

      # NOTE: This step is platform-specific
      # Update the version number in the application package itself
      - name: Update version number in the application package
        run: |
          ./gradlew setCurrentVersion -Pargs=${{ env.the_version }}
          ./gradlew currentVersion -q > .temp_version.out
          new_version=$(cat .temp_version.out |grep -v Downloading |grep -v '%')
          rm .temp_version.out
          echo "New Application Version: $new_version"


      #########################################################################
      # Versioning Summary
      #########################################################################
      - name: Versioning Summary
        run: |
          echo "the_service: ${{ env.the_service }}"
          echo "new version (the_version): ${{ env.the_version }}"
          echo "the_env: ${{ env.the_env }}"
          echo "software_version: ${{ env.software_version }}"
          echo "GITHUB REF: ${{ github.ref }}"
          echo "VENUE: ${{ env.venue }}"

      #########################################################################
      # Build
      #########################################################################
      # NOTE: This step is platform-specific
      # These are gradle-specific steps for installing the application
      - name: Build Software
        run: |
          rm -rf dist
          ./gradlew --scan buildArtifact


      #########################################################################
      # Test
      #########################################################################
      # - name: SonarCloud Scan
      #   uses: sonarsource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     args: >
      #       -Dsonar.organization=${{ github.repository_owner }}
      #       -Dsonar.projectKey=${{ github.repository_owner }}_l2ss-py
      #       -Dsonar.python.coverage.reportPaths=build/reports/coverage.xml
      #       -Dsonar.sources=podaac/
      #       -Dsonar.tests=tests/
      #       -Dsonar.projectName=l2ss-py
      #       -Dsonar.projectVersion=${{ env.software_version }}
      #       -Dsonar.python.version=3.8,3.9,3.10

      # This step will fail the build if snyk fails
      # - name: Run Snyk as a blocking step
      #   uses: snyk/actions/python-3.8@master
      #   env:
      #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     command: test
      #     args: >
      #         --org=${{ secrets.SNYK_ORG_ID }}
      #         --project-name=${{ github.repository }}
      #         --severity-threshold=high
      #         --fail-on=all

      # # This step will send the results of snyk to the snyk servers
      # - name: Run Snyk on Python
      #   uses: snyk/actions/python-3.8@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     command: monitor
      #     args: >
      #       --org=${{ secrets.SNYK_ORG_ID }}
      #       --project-name=${{ github.repository }}

      # Lastly run the tests bundled with the repo
      # - name: Test and coverage
      #   run: |
      #     gradle wrapper --gradle-version 6.3
      #     ./gradlew test
      #     ./gradlew mergeJUnitReports
      #     junit 'build/test-results/test/TESTS-TestSuites.xml'

      #########################################################################
      # Publish new version numbers
      #########################################################################
      - name: Commit Version Bump
        # If building develop, a release branch, or main then we commit the version bump back to the repo
        if: |
          github.ref == 'refs/heads/develop' ||
          github.ref == 'refs/heads/main'    ||
          startsWith(github.ref, 'refs/heads/release')
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git commit -am "/version ${{ env.the_version }}"
          git push

      - name: Push Tag
        env:
          VERSION: ${{ env.the_version }}
        if: |
          github.ref == 'refs/heads/develop' ||
          github.ref == 'refs/heads/main'    ||
          startsWith(github.ref, 'refs/heads/release')
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "${VERSION}" -m "Version ${VERSION}"
          git push origin "${VERSION}"


      #########################################################################
      # Publish release to releases
      #########################################################################
      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: '${{ github.event.repository.name }}-${{ env.the_version}}'
          exclusions: '*.git* /*node_modules/* .editorconfig'

      - name: Upload Release
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "${{ github.repository }}-${{ env.the_version}}.zip"
          token: ${{ secrets.GITHUB_TOKEN }}

        #   stage("Upload to Artifactory"){
        #     when{
        #         anyOf{
        #             branch 'develop'
        #             branch 'master'
        #             changeRequest target: 'develop'
        #             changeRequest target: 'master'
        #             changelog '/jenkins deploy-dev' 
        #         }
        #     }
        #     steps{
        #         unstash name: 'build-info'
        #         unstash name: 'artifacts'
        #         script{
        #             build_info = readYaml file: 'build-info.yaml'
        #             the_version = build_info['build_service_version']
        #         }
        #         echo "Publish ${the_version} to ${build_info.artifactory}"
        #         withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
        #             sh "ls -la"
        #             sh "cd dist; pwd; ls -la; curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} -X PUT ${build_info.artifactory}/${the_version}/forge-${the_version}.zip -T forge-${the_version}.zip"
        #             sh "echo = Upload to CAE Artifactory Succeeded =="
        #         }
        #     }
        # }

      #########################################################################
      # Build and Publish Docker Container
      #########################################################################
      # Setup docker to build and push images
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy Env Override
        if: |
          github.event.head_commit.message == '/deploy sit' ||
          github.event.head_commit.message == '/deploy uat'
        run: |
          message="${{ github.event.head_commit.message }}"
          trimmed_message=${message:1}  # Remove leading slash
          override_env=$(echo "$trimmed_message" | grep -oE '[^[:space:]]+$')
          override_env_upper=$(echo "$trimmed_message" | awk '{print toupper($NF)}')
          echo "THE_ENV=${override_env}" >> $GITHUB_ENV
          echo "TARGET_ENV_UPPERCASE=${override_env_upper}" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.THE_VERSION }}
            type=raw,value=${{ env.THE_ENV }}

      - name: Build and push Docker image
        if: |
          github.ref == 'refs/heads/develop' ||
          github.ref == 'refs/heads/main'    ||
          startsWith(github.ref, 'refs/heads/release') ||
          github.event.head_commit.message == '/deploy sit' ||
          github.event.head_commit.message == '/deploy uat'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/Dockerfile
          push: true
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      #########################################################################
      # Build and Publish Docker Container
      #########################################################################
      - name: Deploy Terraform
        if: |
          github.ref == 'refs/heads/develop' ||
          github.ref == 'refs/heads/main'    ||
          startsWith(github.ref, 'refs/heads/release') ||
          github.event.head_commit.message == '/deploy sit' ||
          github.event.head_commit.message == '/deploy uat'
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID:       ${{ secrets[format('AWS_ACCESS_KEY_ID_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}
          AWS_SECRET_ACCESS_KEY:   ${{ secrets[format('AWS_SECRET_ACCESS_KEY_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}
          AWS_DEFAULT_REGION:      us-west-2

          TF_VAR_hitide_profile_docker_image: "ghcr.io/podaac/hitide-profile:${{ env.DOCKER_METADATA_OUTPUT_VERSION }}"
          TF_VAR_EARTH_DATA_LOGIN_CLIENT_ID: ${{ secrets[format('EARTH_DATA_LOGIN_CLIENT_ID_{0}', env.TARGET_ENV_UPPERCASE)] }}
          TF_VAR_EARTH_DATA_LOGIN_PASSWORD: ${{ secrets[format('EARTH_DATA_LOGIN_PASSWORD_{0}', env.TARGET_ENV_UPPERCASE)] }}

        run: |
          source bin/config.sh ${{ env.THE_ENV }}
          terraform plan -var-file=tfvars/"${{ env.THE_ENV }}".tfvars -var="app_version=${{ env.THE_VERSION }}" -out="tfplan"
          terraform apply -auto-approve tfplan          